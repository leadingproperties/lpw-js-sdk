{"version":3,"sources":["Connector.js","Helper.js","LPW.js","Logger.js","OptionsParser.js","PDF.js"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxxfile":"sdk.js","sourcesContent":["/**\n * Public API connector\n * @param {string} token\n * @constructor\n *\n * @since 1.0.0\n */\nfunction Connector(token){\n  this.token = token;\n  this.apiPath = 'https://lpw-public-api.herokuapp.com';\n}\n\n/**\n * Sends request to propertyObjects controller with different options\n * @param {object} options\n * @param {function} lpwCallback\n *\n * @since 1.0.0\n */\nConnector.prototype.readProperties = function(options, lpwCallback){\n  var url     = this.apiPath + '/property_objects';\n\n  if(typeof options === 'string' && options.length > 0){\n    url = url + '?' + options\n  }\n\n  this._defaultRequest(url, 'GET', null, lpwCallback);\n};\n\n/**\n * Sends request to propertyObjects controller only with id parameter\n * @param {number} id - property id\n * @param {string} locale - locale\n * @param {function} lpwCallback\n *\n * @since 1.0.0\n */\nConnector.prototype.readPropertyById = function(id, locale, lpwCallback){\n  this._defaultRequest(this.apiPath + '/property_objects/' + id + '?locale=' + locale, 'GET', null, lpwCallback);\n};\n\n/**\n * Sends request to currencies controller\n * @param {function} lpwCallback\n *\n * @since 1.0.0\n */\nConnector.prototype.readCurrencies = function(lpwCallback){\n  this._defaultRequest(this.apiPath + '/currencies', 'GET', null, lpwCallback);\n};\n\n/**\n * Sends request to PDF controller\n * @param {number} id - property id\n * @param {boolean} forRent - request pdf with rent or sale data\n * @param {string} locale - pdf language\n * @param {function} lpwCallback\n *\n * @since 1.0.0\n */\nConnector.prototype.readPDF = function(id, forRent, locale, lpwCallback){\n  this._defaultRequest(this.apiPath + '/' + locale + '/pdf/' + id + (forRent ? '?for_rent=true' : ''), 'GET', null, lpwCallback);\n};\n\n/**\n * Default requester\n * @param {String} url - request url\n * @param {String} method - HTTP ('GET', 'POST', etc.) method\n * @param {Object} headers - HTTP headers\n * @param lpwCallback - lpw instance callback\n * @private\n *\n * @since 1.0.0\n */\nConnector.prototype._defaultRequest = function(url, method, headers, lpwCallback){\n  var request = new XMLHttpRequest();\n  method = method || 'GET';\n\n  request.open(method, url, true);\n  request.setRequestHeader('Authorization', 'Token token=' + this.token);\n  if(headers){\n    for(var prop in headers){\n      request.setRequestHeader(prop, headers[prop]);\n    }\n  }\n  request.onload = lpwCallback.bind(this, request);\n  request.onerror = lpwCallback.bind(this, request);\n  request.send(null);\n};","/**\n * Helper class containing methods called from several places\n * @constructor\n */\nfunction Helper(){\n\n}\n\n/**\n * Checks if HTTP status is between 200 and 400\n * @param status\n * @returns {boolean}\n *\n * @since 1.0.0\n */\nHelper.prototype.isSuccessHTTPStatus = function(status){\n  return status >= 200 && status < 400;\n};\n\n/**\n * Returns structured answer from XMLHttpRequest\n * @param {*} data\n * @param {object} XMLHttpRequest\n * @returns {{data: (*|null), status: number, statusText: string}}\n *\n * @since 1.0.0\n */\nHelper.prototype.getTransformedResponse = function(data, XMLHttpRequest){\n  return {\n    data      : data || null,\n    status    : XMLHttpRequest ? XMLHttpRequest.status : 0,\n    statusText: XMLHttpRequest ? XMLHttpRequest.statusText : ''\n  };\n};\n\n/**\n * Checks if argument is array\n * @param any\n * @returns {boolean}\n *\n * @since 1.0.0\n */\nHelper.prototype.isArray = function(any){\n  return typeof any === 'object' && any instanceof Array && Object.prototype.toString.call(any) === '[object Array]';\n};\n\n/**\n * Checks if argument is object\n * @param any\n * @returns {boolean}\n *\n * @since 1.0.0\n */\nHelper.prototype.isObject = function(any){\n  return any === Object(any) && Object.prototype.toString.call(any) !== '[object Array]';\n};\n\n/**\n * Removes {null} and {undefined} from {object}\n * @param {object} object\n * @returns {*}\n *\n * @since 1.0.0\n */\nHelper.prototype.cleanObject = function(object){\n  if(!this.isObject(object)){\n    return object;\n  }\n\n  for(var prop in object){\n    if(object.hasOwnProperty(prop) && (object[prop] === null || object[prop] === undefined)){\n      delete object[prop];\n    }\n  }\n\n  return object;\n};","var pdf;\n/**\n * Main LPW class\n * @param {string} token - API user token\n * @param {constructorOptions} options - configuration data\n * @constructor\n *\n * @since 1.0.0\n */\nfunction LPW(token, options){\n  this.locale = (options && options.locale) || 'en';\n  this.debugEnabled = (options && options.debugEnabled) || false;\n\n  this.connector = new Connector(token);\n  this.helper = new Helper();\n  this.logger = new Logger(this.debugEnabled);\n  this.optionsParser = new OptionsParser(this.helper, this.logger);\n\n  pdf = new PDF(this.connector);\n}\n\n/**\n * Gets properties corresponding to options\n * @param {getPropertiesOptions} options - see getPropertiesOptions typedef\n * @param {userCallback} userCallback\n *\n * @since 1.0.0\n */\nLPW.prototype.getProperties = function(options, userCallback){\n  if(!userCallback || typeof userCallback !== 'function'){\n    throw new TypeError('LPW.getProperties: callback is not a function');\n  }\n\n  if(!this.helper.isObject(options)){\n    options = {};\n  }\n\n  if(!options.locale){\n    options.locale = this.locale;\n  }\n\n  this.connector.readProperties(\n    this.optionsParser.getSerializedOptions(options),\n    this.defaultCallback.bind(this, userCallback)\n  );\n};\n\n/**\n * Gets single property by ID\n * @param {number} id - property id\n * @param {getPropertyByIdOptions} options - config data (see getPropertyByIdOptions typedef)\n * @param {userCallback} userCallback\n *\n * @since 1.0.0\n */\nLPW.prototype.getPropertyById = function(id, options, userCallback){\n  id = parseInt(id, 10);\n\n  if(typeof userCallback !== 'function'){\n    throw new TypeError('LPW.getPropertyById: callback is not a function');\n  }\n\n  if(isNaN(id)){\n    throw new TypeError('LPW.getPropertyById: ID is not a number');\n  }\n\n  if(!this.helper.isObject(options)){\n    options = {};\n  }\n\n  if(!options.locale){\n    options.locale = this.locale;\n  }\n\n  this.connector.readPropertyById(\n    id,\n    options.locale,\n    this.defaultCallback.bind(this, userCallback)\n  );\n};\n\n/**\n * Gets list of available currencies\n * @param {userCallback} userCallback\n *\n * @since 1.0.0\n */\nLPW.prototype.getCurrencies = function(userCallback){\n  this.connector.readCurrencies(\n    this.defaultCallback.bind(this, userCallback)\n  );\n};\n\n/**\n * Sets default locale\n * @param {string} locale - locale string ISO 639-1 {@link https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes#Partial_ISO_639_table|Wiki}\n *\n * @since 1.0.0\n */\nLPW.prototype.setLocale = function(locale){\n  if(typeof locale !== 'string'){\n    throw new TypeError('LPW.setLocale: locale is not a string');\n  }\n  this.locale = locale;\n};\n\n/**\n * Gets pdf link\n * @param {number} id - property ID\n * @param {getPDFOptions} options\n * @see {@link getPDFOptions}\n * @param {userCallback} userCallback\n *\n * @since 1.0.0\n */\nLPW.prototype.getPDF = function(id, options, userCallback){\n  id = parseInt(id, 10);\n\n  if(typeof userCallback !== 'function'){\n    throw new TypeError('LPW.getPDF: callback is not a function');\n  }\n\n  if(isNaN(id)){\n    throw new TypeError('LPW.getPDF: ID is not a number');\n  }\n\n  var config = {};\n  config.forRent = options.forRent || null;\n  config.locale = options.locale || this.locale;\n\n  pdf.requestPDF(id, config.forRent, config.locale, this.getPDFCallback.bind(this, userCallback));\n};\n\n//----------------------------------------------------------------------------------------\n// Callbacks\n//----------------------------------------------------------------------------------------\n/**\n * Calls user callback with request response as argument\n * @param {userCallback} userCallback\n * @param {object} XMLHttpRequest\n *\n * @since 1.0.0\n */\nLPW.prototype.defaultCallback = function(userCallback, XMLHttpRequest){\n  var data   = this.helper.isSuccessHTTPStatus(XMLHttpRequest.status) ? JSON.parse(XMLHttpRequest.response) : null,\n      answer = this.helper.getTransformedResponse(data, XMLHttpRequest);\n  userCallback(answer);\n};\n\n/**\n * Calls user callback with request response as argument.\n * Only for getPDF method.\n * @param {userCallback} userCallback\n * @param {object} XMLHttpRequest\n *\n * @since 1.0.0\n */\nLPW.prototype.getPDFCallback = function(userCallback, XMLHttpRequest){\n  var data = XMLHttpRequest && this.helper.isSuccessHTTPStatus(XMLHttpRequest.status) ? JSON.parse(XMLHttpRequest.response) : null,\n      answer = this.helper.getTransformedResponse(data, (XMLHttpRequest ? XMLHttpRequest : {status: 408, statusText: 'Request Timeout'}));\n  userCallback(answer);\n};\n\nwindow.LPW = LPW;\n\n//----------------------------------------------------------------------------------------\n// Definitions\n//----------------------------------------------------------------------------------------\n/**\n * User callback\n * @callback userCallback\n * @param {userCallbackAnswer} answer from the API\n */\n\n/**\n * Answer for userCallback\n * @typedef {object} userCallbackAnswer\n * @property {(*|null)} data - Public API answer\n * @property {number} status - HTTP status code\n * @property {string} statusText - HTTP status test\n */\n\n/**\n * @typedef {object} constructorOptions\n * @property {string} locale - default locale\n * @property {boolean} debugEnabled - enable/disable errors logging\n */\n\n/**\n * @typedef {object} getPropertyByIdOptions\n * @property {string} locale - locale\n * @property {boolean} forSale - show property data for sale\n * @property {boolean} forRent - show property data for rent\n */\n\n/**\n * @typedef {object} getPDFOptions\n * @property {string} locale - locale\n * @property {boolean} forRent - show information for rent if true and for sale if false or not present\n */\n\n/**\n * @typedef {object} locationPoint\n * @property {number} lat - latitude\n * @property {number} lng - longitude\n * @property {number} radius - radius from the point (km) to search in\n * @property {string} countryCode - country code (https://en.wikipedia.org/wiki/ISO_3166-1) to filter properties\n *                                  only from this country\n */\n\n/**\n * @typedef {object} locationShape\n * @property {locationPoint} topRight - top-right point of target shape\n * @property {locationPoint} bottomLeft - bottom-left point of target shape\n * @property {string} countryCode - country code (https://en.wikipedia.org/wiki/ISO_3166-1) to filter properties\n *                                  only from this country\n */\n\n/**\n * @typedef {object} propertyPrice\n * @property {number} min - minimum price\n * @property {number} max - maximum price\n * @property {string} currency - currency code\n * @property {'day'|'week'|'month'} [period] - rent period. Required only in rent query (optional)\n *\n * @description Requires min and|or max and currency code. Period is used only for properties for rent.\n */\n\n/**\n * Available options for getPropertiesOptions\n * @typedef {object} getPropertiesOptions\n * @property {number} id - single property id\n * @property {string} search - search query\n * @property {string} locale - language of the response translations\n * @property {number}[1] page - pagination page\n * @property {number}[10] perPage - properties per page\n * @property {boolean} forSale - show properties for sale\n * @property {boolean} forRent - show properties for rent\n * @property {string} orderBy - asc/desc order of properties\n * @property {locationPoint} locationPoint - geographical point to search around (see locationPoint typedef)\n * @property {locationShape} locationShape - geographical shape to search in (see locationShape typedef)\n * @property {boolean} hdPhotos - only show properties with HQ photos\n * @property {object} area - area filter, sq.m. (min and|or max, see example below)\n * @property {object} price - price filter (see propertyPrice typedef)\n * @property {array.<number>} propertyTypes - array of property types ids\n * @property {array.<number>} rooms - array of room numbers\n * @property {array.<number>} ids - array of properties ids\n *\n *\n * Rent-only properties:\n * @property {boolean} childFriendly - show only child-friendly properties\n * @property {boolean} petsAllowed - show properties only where pets allowed\n * @property {boolean} longRent - show properties for long rent\n * @property {boolean} shortRent - show properties for short rent\n * @property {number} persons - max persons allowed to rent\n *\n *\n *\n * @example area\n * {min: 50,max: 100} or {min: 50} or {max: 100}\n *\n * @example rooms\n * [1] or [1,3,5]\n */\n\n/**\n * A number, or a string containing a number.\n * @typedef {(number|string)} NumberLike\n */","function Logger(enabled){\n  this.enabled = enabled || false;\n}\n\nLogger.prototype.log = function(string){\n  if(this.enabled){\n    console.log(string);\n  }\n};\n\nLogger.prototype.logError = function(){\n\n};","/**\n * LPW.getProperties options parser\n * @param helper\n * @param logger\n * @constructor\n * @since 1.0.0\n */\nfunction OptionsParser(helper, logger){\n  this.helper = helper;\n  this.logger = logger;\n}\n\n/**\n * Parses and removes {null|undefined} values from options hash\n * @param {object} options\n * @since 1.0.0\n */\nOptionsParser.prototype.getParsedOptions = function(options){\n  var $this         = this,\n      parsedOptions = {\n        id            : options.id || null,\n        locale        : options.locale || 'en',\n        page          : options.page || 1,\n        per_page      : options.perPage || 10,\n        for_sale      : !options.forRent,\n        for_rent      : !!options.forRent,\n        order_by      : options.orderBy ? {order: options.orderBy} : null,\n        location_point: options.locationPoint ? $this._getParsedLocationPoint(options.locationPoint) : null,\n        location_shape: options.locationShape ? $this._getParsedLocationShape(options.locationShape) : null,\n        hd_photos     : options.hdPhotos || null,  //don't send if falsy\n        area          : options.area ? $this._getParsedArea(options.area) : null,\n        price         : options.price ? $this._getParsedPrice(options.price, options.forRent) : null,\n        property_types: options.propertyTypes && $this.helper.isArray(options.propertyTypes) ? options.propertyTypes : null,\n        rooms         : options.rooms && $this.helper.isArray(options.rooms) ? options.rooms : null,\n        ids           : options.ids && $this.helper.isArray(options.ids) ? options.ids : null\n      };\n\n  //rent only\n  if(parsedOptions.for_rent){\n    parsedOptions.child_friendly = (parsedOptions.for_rent && options.childFriendly) || null; //don't send if falsy\n    parsedOptions.pets_allowed = (parsedOptions.for_rent && options.petsAllowed) || null; //don't send if falsy\n    parsedOptions.long_rent = (parsedOptions.for_rent && options.longRent) || null; //don't send if falsy\n    parsedOptions.short_rent = (parsedOptions.for_rent && options.shortRent) || null; //don't send if falsy\n    parsedOptions.persons = parsedOptions.for_rent ? options.persons || null : null;\n  }\n\n  return this.helper.cleanObject(parsedOptions);\n};\n\n/**\n * Serializes options hash\n * @param {object} options\n * @returns {string}\n * @since 1.0.0\n */\nOptionsParser.prototype.getSerializedOptions = function(options){\n  var paramsString = '';\n  options = this.getParsedOptions(options);\n\n  for(var prop in options){\n    if(options.hasOwnProperty(prop)){\n      if(this.helper.isArray(options[prop])){\n        for(var i = 0; i < options[prop].length; i++){\n          paramsString += '&' + prop + '[]=' + options[prop][i];\n        }\n      }else if(this.helper.isObject(options[prop])){\n        for(var objProp in options[prop]){\n          if(options[prop].hasOwnProperty(objProp)){\n            paramsString += '&' + prop + '[' + objProp + ']=' + options[prop][objProp];\n          }\n        }\n      }else{\n        paramsString += '&' + prop + '=' + options[prop];\n      }\n    }\n  }\n\n  if(paramsString.charAt(0) === '&'){\n    paramsString = paramsString.slice(1);\n  }\n\n  return paramsString;\n};\n\n/**\n * Parses and validates options.locationPoint\n * @param {object} locationPoint\n * @returns {null|Object}\n * @private\n * @since 1.0.0\n */\nOptionsParser.prototype._getParsedLocationPoint = function(locationPoint){\n  if(!this.helper.isObject(locationPoint)){\n    this.logger.log('locationPoint is not an Object');\n    return null;\n  }\n\n  if(!(locationPoint.hasOwnProperty('lat') && locationPoint.hasOwnProperty('lng'))){\n    this.logger.log('Missing required parameters for locationPoint: lat or lng');\n    return null;\n  }\n\n  return this.helper.cleanObject({\n                                   lat         : locationPoint.lat,\n                                   lon         : locationPoint.lng,\n                                   radius      : locationPoint.radius,\n                                   country_code: locationPoint.countryCode\n                                 });\n};\n\n/**\n * Parses and validates options.locationShape\n * @param {object} locationShape\n * @returns {null|object}\n * @private\n * @since 1.0.0\n */\nOptionsParser.prototype._getParsedLocationShape = function(locationShape){\n  if(!this.helper.isObject(locationShape)){\n    this.logger.log('locationShape is not an Object');\n    return null;\n  }\n\n  if(!(locationShape.hasOwnProperty('topRight') && this.helper.isObject(locationShape.topRight) &&\n    locationShape.topRight.hasOwnProperty('lat') && locationShape.topRight.hasOwnProperty('lng'))){\n    this.logger.log('Invalid value of locationShape.topRight');\n    return null;\n  }\n\n  if(!(locationShape.hasOwnProperty('bottomLeft') && this.helper.isObject(locationShape.bottomLeft)\n    && locationShape.bottomLeft.hasOwnProperty('lat') && locationShape.bottomLeft.hasOwnProperty('lng'))){\n    this.logger.log('Invalid value of locationShape.bottomLeft');\n    return null;\n  }\n\n  return this.helper.cleanObject({\n                                   top_right   : {\n                                     lat: locationShape.topRight.lat,\n                                     lon: locationShape.topRight.lng\n                                   },\n                                   bottom_left : {\n                                     lat: locationShape.bottomLeft.lat,\n                                     lon: locationShape.bottomLeft.lng\n                                   },\n                                   country_code: locationShape.countryCode\n                                 });\n};\n\n/**\n * Parses and validates options.area\n * @param {object} areaHash\n * @returns {null|object}\n * @private\n * @since 1.0.0\n */\nOptionsParser.prototype._getParsedArea = function(areaHash){\n  if(!this.helper.isObject(areaHash)){\n    this.logger.log('getProperties options: options.area is not an Object');\n    return null;\n  }\n\n  if(!(areaHash.hasOwnProperty('min') || areaHash.hasOwnProperty('max'))){\n    this.logger.log('getProperties options: Required at least one property `min` or `max` in options.area');\n    return null;\n  }\n\n  return areaHash;\n};\n\n/**\n * Parses and validates options.price\n * @param {object} priceHash\n * @param {boolean} isRent\n * @returns {null|object}\n * @private\n * @since 1.0.0\n */\nOptionsParser.prototype._getParsedPrice = function(priceHash, isRent){\n  isRent = isRent || false;\n  if(!this.helper.isObject(priceHash)){\n    this.logger.log('getProperties options: options.price is not an Object');\n    return null;\n  }\n\n  if(!(priceHash.hasOwnProperty('min') || priceHash.hasOwnProperty('max'))){\n    this.logger.log('getProperties options: Required at least one property `min` or `max` in options.price');\n    return null;\n  }\n\n  if(!priceHash.hasOwnProperty('currency')){\n    this.logger.log('getProperties options: Missing property `currency` in options.price');\n    return null;\n  }\n\n  if(isRent && !priceHash.hasOwnProperty('period')){\n    this.logger.log('getProperties options: Missing property `period` in options.price');\n    return null;\n  }\n\n  return this.helper.cleanObject(priceHash);\n};","/**\n * PDF\n * @param connector\n * @constructor\n *\n * @since 1.0.0\n */\nfunction PDF(connector){\n  this.attemptsMax = 20;\n  this.attempt = 0;\n  this.delay = 1000;\n  this.timeoutID = undefined;\n\n  this.connector = connector;\n}\n\n/**\n * Starts request pdf loop.\n * @param {number} id - property ID\n * @param {boolean} forRent - pdf with info for rent or sale. Sale is default\n * @param {string} locale - pdf locale\n * @param {function} lpwCallback\n *\n * @since 1.0.0\n */\nPDF.prototype.requestPDF = function(id, forRent, locale, lpwCallback){\n  this.attempt = 0;\n  this.doRequest(id, forRent, locale, lpwCallback);\n};\n\n/**\n * Checks if attempts limit reached.\n * If it does - resets attempts and timeout, calls lpwCallback and stops execution.\n * If doesn't - increments attempt and calls connector.readPDF\n * @param {number} id - property ID\n * @param {boolean} forRent - pdf with info for rent or sale. For sale is default\n * @param {string} locale - pdf locale\n * @param {function} lpwCallback\n *\n * @since 1.0.0\n */\nPDF.prototype.doRequest = function(id, forRent, locale, lpwCallback){\n  if(this.attempt >= this.attemptsMax){\n    this.attempt = 0;\n    this.resetTimeout();\n    lpwCallback(false);\n    return;\n  }\n  this.attempt++;\n  this.connector.readPDF(id, forRent, locale, this.pdfCallback.bind(this, id, forRent, locale, lpwCallback));\n};\n\n/**\n * Checks if valid answer was received.\n * If it does - resets attempts and timeout, calls lpwCallback and stops execution.\n * If doesn't - continues loop by calling doRequest again\n * @param {number} id - property ID\n * @param {boolean} forRent - pdf with info for rent or sale. Sale is default\n * @param {string} locale - pdf locale\n * @param {function} lpwCallback\n * @param {object} XMLHttpRequest\n *\n * @since 1.0.0\n */\nPDF.prototype.pdfCallback = function(id, forRent, locale, lpwCallback, XMLHttpRequest){\n  this.resetTimeout();\n\n  if(XMLHttpRequest.response){\n    var parsedResponse = JSON.parse(XMLHttpRequest.response);\n    if(this.hasPath(parsedResponse)){\n      this.attempt = 0;\n      lpwCallback(XMLHttpRequest);\n      return;\n    }\n  }\n\n  this.timeoutID = setTimeout(function(){\n    this.doRequest(id, forRent, locale, lpwCallback);\n  }.bind(this), this.delay);\n};\n\n/**\n * Resets Timeout if present\n *\n * @since 1.0.0\n */\nPDF.prototype.resetTimeout = function(){\n  if(this.timeoutID){\n    clearTimeout(this.timeoutID);\n    this.timeoutID = undefined;\n  }\n};\n\n/**\n * Checks if API answer has pdf_path\n * @param object\n * @returns {boolean}\n *\n * @since 1.0.0\n */\nPDF.prototype.hasPath = function(object){\n  return !!(object && object.hasOwnProperty('pdf_path') && object.pdf_path);\n};"],"sourceRoot":"/source/"}