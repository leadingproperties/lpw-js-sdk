{"version":3,"sources":["Connector.js","Exceptions.js","Helper.js","LPW.js","Logger.js","OptionsParser.js"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7BA;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnfile":"sdk.js","sourcesContent":["function Connector(token){\n  this.token = token;\n  this.apiPath = 'https://lpw-public-api.herokuapp.com'\n}\n\nConnector.prototype.getProperties = function(options, onLoadCallback, onErrorCallback){\n  var url     = this.apiPath + '/property_objects',\n      request = new XMLHttpRequest();\n\n  if(typeof options === 'string' && options.length > 0){\n    url = url + '?' + options\n  }\n\n  request.open('GET', url, true);\n  request.setRequestHeader('Authorization', 'Token token=' + this.token);\n  request.onload = onLoadCallback.bind(this, request);\n  request.onerror = onErrorCallback.bind(this, request);\n  request.send(null);\n};\n\nConnector.prototype.getPropertyById = function(id, onLoadCallback, onErrorCallback){\n  var url     = this.apiPath + '/property_objects/?id=' + id,\n      request = new XMLHttpRequest();\n\n  request.open('GET', url, true);\n  request.setRequestHeader('Authorization', 'Token token=' + this.token);\n  request.onload = onLoadCallback.bind(this, request);\n  request.onerror = onErrorCallback.bind(this, request);\n  request.send(null);\n};","function LPWException(message){\n  this.message = message;\n  this.name = \"LPW Exception\";\n}","function Helper(){\n\n}\n\nHelper.prototype.isSuccessHTTPStatus = function(status){\n  return status >= 200 && status < 400;\n};\n\nHelper.prototype.getTransformedResponse = function(data, XMLHttpRequest){\n  return {\n    data      : data || null,\n    status    : XMLHttpRequest ? XMLHttpRequest.status : 0,\n    statusText: XMLHttpRequest ? XMLHttpRequest.statusText : ''\n  };\n};\nHelper.prototype.isArray = function(any){\n  return typeof any === 'object' && any instanceof Array && Object.prototype.toString.call( any ) === '[object Array]';\n};\n\nHelper.prototype.isObject = function(any){\n  return any === Object(any) && Object.prototype.toString.call( any ) !== '[object Array]';\n};\n\nHelper.prototype.cleanObject = function(object){\n  if(!this.isObject(object)){\n    return object;\n  }\n\n  for(var prop in object){\n    if(object.hasOwnProperty(prop) && (object[prop] === null || object[prop] === undefined)){\n      delete object[prop];\n    }\n  }\n\n  return object;\n};","function LPW(token, debugEnabled){\n  this.connector = new Connector(token);\n  this.helper = new Helper();\n  this.logger = new Logger(debugEnabled);\n  this.optionsParser = new OptionsParser(this.helper, this.logger);\n}\n\nLPW.prototype.getProperties = function(options, userCallback){\n  if(typeof userCallback !== 'function' && typeof options !== 'function'){\n    this.logger.log('getProperties: Callback required.');\n    return;\n  }\n\n  if(typeof options === 'function'){\n    userCallback = options;\n    options = {};\n  }\n\n  options = this.optionsParser.getSerializedOptions(options);\n\n  this.connector.getProperties(\n    options,\n    this.getPropertiesSuccess.bind(this, userCallback),\n    this.getPropertiesError.bind(this, userCallback)\n  );\n};\n\nLPW.prototype.getPropertyById = function(id, userCallback){\n  id = parseInt(id, 10);\n\n  if(typeof userCallback !== 'function'){\n    this.logger.log('getPropertyById: Callback required.');\n    return;\n  }\n\n  if(isNaN(id)){\n    this.logger.log('getPropertyById: ID is not a number');\n    return;\n  }\n\n  this.connector.getPropertyById(\n    id,\n    this.getPropertyByIdSuccess.bind(this, userCallback),\n    this.getPropertiesError.bind(this, userCallback)\n  );\n};\n\n//----------------------------------------------------------------------------------------\n// Callbacks\n//----------------------------------------------------------------------------------------\nLPW.prototype.getPropertiesSuccess = function(userCallback, XMLHttpRequest){\n  var data   = this.helper.isSuccessHTTPStatus(XMLHttpRequest.status) ? JSON.parse(XMLHttpRequest.response) : null,\n      answer = this.helper.getTransformedResponse(data, XMLHttpRequest);\n  userCallback(answer);\n};\n\nLPW.prototype.getPropertiesError = function(userCallback, XMLHttpRequest){\n  userCallback(this.helper.getTransformedResponse(null, XMLHttpRequest));\n};\n\nLPW.prototype.getPropertyByIdSuccess = function(userCallback, XMLHttpRequest){\n  // console.debug('getPropertyByIdSuccess', JSON.parse(XMLHttpRequest.response));\n  var data   = this.helper.isSuccessHTTPStatus(XMLHttpRequest.status) ? JSON.parse(XMLHttpRequest.response) : null,\n      answer = this.helper.getTransformedResponse(data, XMLHttpRequest);\n  userCallback(answer);\n};\n\nwindow.LPW = LPW;","function Logger(enabled){\n  this.enabled = enabled;\n}\n\nLogger.prototype.log = function(string){\n  if(this.enabled){\n    console.log(string);\n  }\n};\n\nLogger.prototype.logError = function(){\n\n};","function OptionsParser(helper, logger){\n  this.helper = helper;\n  this.logger = logger;\n}\n\nOptionsParser.prototype.getParsedOptions = function(options){\n  var $this         = this,\n      parsedOptions = {\n        id            : options.id || null,\n        search        : options.search || null,\n        locale        : options.locale || 'en',\n        page          : options.page || 1,\n        per_page      : options.perPage || 10,\n        for_sale      : !options.forRent,\n        for_rent      : !!options.forRent,\n        order_by      : options.orderBy ? {order: options.orderBy} : null,\n        location_point: options.locationPoint ? $this._getParsedLocationPoint(options.locationPoint) : null,\n        location_shape: options.locationShape ? $this._getParsedLocationShape(options.locationShape) : null,\n        hd_photos     : options.hdPhotos || null,  //don't send if falsy\n        area          : options.area ? $this._getParsedArea(options.area) : null,\n        price         : options.price ? $this._getParsedPrice(options.price, options.forRent) : null,\n        property_types: options.propertyTypes && $this.helper.isArray(options.propertyTypes) ? options.propertyTypes : null,\n        rooms         : options.rooms && $this.helper.isArray(options.rooms) ? options.rooms : null,\n        ids           : options.ids && $this.helper.isArray(options.ids) ? options.ids : null\n      };\n\n  //rent only\n  if(parsedOptions.for_rent){\n    parsedOptions.child_friendly = (parsedOptions.for_rent && options.childFriendly) || null; //don't send if falsy\n    parsedOptions.pets_allowed = (parsedOptions.for_rent && options.petsAllowed) || null; //don't send if falsy\n    parsedOptions.long_rent = (parsedOptions.for_rent && options.longRent) || null; //don't send if falsy\n    parsedOptions.short_rent = (parsedOptions.for_rent && options.shortRent) || null; //don't send if falsy\n    parsedOptions.persons = parsedOptions.for_rent ? options.persons || null : null;\n  }\n\n  return this.helper.cleanObject(parsedOptions);\n};\n\nOptionsParser.prototype.getSerializedOptions = function(options){\n  var paramsString = '';\n  options = this.getParsedOptions(options);\n\n  for(var prop in options){\n    if(options.hasOwnProperty(prop)){\n      if(this.helper.isArray(options[prop])){\n        for(var i = 0; i < options[prop].length; i++){\n          paramsString += '&' + prop + '[]=' + options[prop][i];\n        }\n      }else if(this.helper.isObject(options[prop])){\n        for(var objProp in options[prop]){\n          if(options[prop].hasOwnProperty(objProp)){\n            paramsString += '&' + prop + '[' + objProp + ']=' + options[prop][objProp];\n          }\n        }\n      }else{\n        paramsString += '&' + prop + '=' + options[prop];\n      }\n    }\n  }\n\n  if(paramsString.charAt(0) === '&'){\n    paramsString = paramsString.slice(1);\n  }\n\n  return paramsString;\n};\n\nOptionsParser.prototype._getParsedLocationPoint = function(locationPoint){\n  if(!this.helper.isObject(locationPoint)){\n    this.logger.log('locationPoint is not an Object');\n    return null;\n  }\n\n  if(!(locationPoint.hasOwnProperty('lat') && locationPoint.hasOwnProperty('lon'))){\n    this.logger.log('Missing required parameters for locationPoint: lat or lon');\n    return null;\n  }\n\n  return this.helper.cleanObject({\n                                   lat         : locationPoint.lat,\n                                   lon         : locationPoint.lon,\n                                   radius      : locationPoint.radius,\n                                   country_code: locationPoint.countryCode\n                                 });\n};\n\nOptionsParser.prototype._getParsedLocationShape = function(locationShape){\n  if(!this.helper.isObject(locationShape)){\n    this.logger.log('locationShape is not an Object');\n    return null;\n  }\n\n  if(!(locationShape.hasOwnProperty('topRight') && this.helper.isObject(locationShape.topRight) &&\n    locationShape.topRight.hasOwnProperty('lat') && locationShape.topRight.hasOwnProperty('lon'))){\n    this.logger.log('Invalid value of locationShape.topRight');\n    return null;\n  }\n\n  if(!(locationShape.hasOwnProperty('bottomLeft') && this.helper.isObject(locationShape.bottomLeft)\n    && locationShape.bottomLeft.hasOwnProperty('lat') && locationShape.bottomLeft.hasOwnProperty('lon'))){\n    this.logger.log('Invalid value of locationShape.bottomLeft');\n    return null;\n  }\n\n  return this.helper.cleanObject({\n                                   top_right   : locationShape.topRight,\n                                   bottom_left : locationShape.bottomLeft,\n                                   country_code: locationShape.countryCode\n                                 });\n};\n\nOptionsParser.prototype._getParsedArea = function(areaHash){\n  if(!this.helper.isObject(areaHash)){\n    this.logger.log('getProperties options: options.area is not an Object');\n    return null;\n  }\n\n  if(!(areaHash.hasOwnProperty('min') || areaHash.hasOwnProperty('max'))){\n    this.logger.log('getProperties options: Required at least one property `min` or `max` in options.area');\n    return null;\n  }\n\n  return areaHash;\n};\n\nOptionsParser.prototype._getParsedPrice = function(priceHash, isRent){\n  isRent = isRent || false;\n  if(!this.helper.isObject(priceHash)){\n    this.logger.log('getProperties options: options.price is not an Object');\n    return null;\n  }\n\n  if(!(priceHash.hasOwnProperty('min') || priceHash.hasOwnProperty('max'))){\n    this.logger.log('getProperties options: Required at least one property `min` or `max` in options.price');\n    return null;\n  }\n\n  if(!priceHash.hasOwnProperty('currency')){\n    this.logger.log('getProperties options: Missing property `currency` in options.price');\n    return null;\n  }\n\n  if(isRent && !priceHash.hasOwnProperty('period')){\n    this.logger.log('getProperties options: Missing property `period` in options.price');\n    return null;\n  }\n\n  return priceHash;\n};\n\n//https://www.leadingproperties.com/property_objects?area%5Bmax%5D=100&area%5Bmin%5D=50&for_rent=true&for_sale=false&long_rent=false&page=1&per_page=12&rooms%5B%5D=1&rooms%5B%5D=2&short_rent=false\n//https://www.leadingproperties.com/property_objects?area[max]=100&area[min]=50&for_rent=true&for_sale=false&long_rent=false&page=1&per_page=12&rooms[]=1&rooms[]=2&short_rent=false"],"sourceRoot":"/source/"}